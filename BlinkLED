#include <SPI.h>
#include <Wire.h>

#define red1 3
#define green1 6
#define blue1 5
#define red2 9
#define green2 11
#define blue2 10
#define delaya 2

int g_iR = 0;
int g_iG = 0;
int g_iB = 0;
int g_iRratio = 2.56;
int g_iGratio = 2.56;
int g_iBratio = 2.56;
int potPin = 2;
int potVal = 0;
int buttonPin1 = 3;
int buttonPin2 = 5;
int g_lightColor;
int lightPattern = 4; //Light Pattern
const int ssPin = 8; // SS Pin for Display
char tempString[10];  // Will be used with sprintf to create strings
float g_redPercent = 0;
float g_greenPercent = 0;
float g_bluePercent = 0;
unsigned long g_bpm = 120; //Tempo BPM
unsigned long g_bpmMS = 60000 / g_bpm;
unsigned long g_bpmMSslow = 60000 / 40; //Slow BPM for slow changing lights
unsigned long timeMS = 0;
unsigned long timeMS2 = 0;
unsigned long timeMS3 = 0;

//*********************************
void setup()
{
  Serial.begin(9600);
  delay(150);
  pinMode(ssPin, OUTPUT);  // Set the SS pin as an output
  digitalWrite(ssPin, HIGH);  // Set the SS pin HIGH
  SPI.begin();  // Begin SPI hardware
  SPI.setClockDivider(SPI_CLOCK_DIV64);  // Slow down SPI clock
  clearDisplaySPI();  // Clears display, resets cursor

  s7sSendStringSPI("----");
  //setDecimalsSPI(0b111111);  // Turn on all decimals, colon, apos
  setBrightnessSPI(255);
  //setDecimalsSPI(0b111111);  // Turn on all decimals, colon, apos
  //attachInterrupt(digitalPinToInterrupt(buttonPin1), button1push, RISING);
  //attachInterrupt(digitalPinToInterrupt(buttonPin2), button2push, RISING);
  pinMode(red1, OUTPUT);
  pinMode(green1, OUTPUT);
  pinMode(blue1, OUTPUT);
  pinMode(red2, OUTPUT);
  pinMode(green2, OUTPUT);
  pinMode(blue2, OUTPUT);
} 

//*********************************
void loop()
{
  //Serial.println(g_bpm);
  //Serial.println(millis());
  
  //potVal = analogRead(0); //read pin 2 analog value from pot each loop
  //Serial.println(potVal);
  //Serial.println(g_bpm);
  
  //matrix.writeDigitNum(
  
  //g_bpm = 115 + (potVal / (1023 / 20)); //40bpm spread starting at 100 bpm
  
  Serial.println(lightPattern);
  if (lightPattern == 1)
  {
    //Serial.println("Running light pattern 1");
    lightPattern1();
  }
  else if (lightPattern == 2)
  {
    //Serial.println("Running light pattern 2");
    lightPattern2();
  }
  else if (lightPattern == 3)
  {
    //Serial.println("Running light pattern 3");
    lightPattern3();
  }
  else if (lightPattern == 4)
  {
    //Serial.println("Running light pattern 4");
    lightPattern4();
  }
  else if (lightPattern == 5)
  {
    //Serial.println("Running light pattern 5");
    lightPattern5();
  }
}
//*********************************
void lightPattern1()
{
//pulse color on beat
  changeColor();
  unsigned long rampValue = 0;
  delay(1);
  timeMS = millis();
  //g_bpm = rotaryPotBpm(analogRead(0));
  g_bpmMS = (60000 / g_bpm) - 2  ; //-1 for delay adjustment during loops
  //Serial.println(g_bpm);
  while ((millis() - timeMS) < (g_bpmMS / 2))
  {
    rampValue = rampValue + (1200 / (g_bpmMS / 2));
    delay(5);
    //Serial.println(rampValue);
    analogWrite(red1,rampValue * g_redPercent);
    analogWrite(green1,rampValue * g_greenPercent);
    analogWrite(blue1,rampValue * g_bluePercent);
  }
  //beatTimer();
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMS / 2))
  {
    rampValue = rampValue - (1200 / (g_bpmMS / 2));
    delay(5);
    //Serial.println(rampValue);
    analogWrite(red1,rampValue * g_redPercent);
    analogWrite(green1,rampValue * g_greenPercent);
    analogWrite(blue1,rampValue * g_bluePercent);
  }
}

//*********************************
void lightPattern2()
{
//Flash color on beat
  changeColor();
  delay(1);
  unsigned long rampValue = 0;
  //g_bpm = rotaryPotBpm(analogRead(0));
  g_bpmMS = (60000 / g_bpm) - 3  ; //-1 for delay adjustment during loops
  //Serial.println(g_bpm); 
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMS / 10))
  {
    //delay(6);
    analogWrite(red1,1200 * g_redPercent);
    analogWrite(green1,1200 * g_greenPercent);
    analogWrite(blue1,1200 * g_bluePercent);
  }
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMS / 1.1))
  {
    //delay(6);
    analogWrite(red1,0);
    analogWrite(green1,0);
    analogWrite(blue1,0);
  } 
}
//*********************************
void lightPattern3()
{
  // Slow light blend between colors
  // Constant slow BPM 70 bpm?
  // colors: purple, blue, pink, 
  g_bpmMSslow = 1300;
  changeColor();
  unsigned long rampValue = 0;
  delay(200);
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMSslow))
  {
    rampValue = rampValue + (1500 / (g_bpmMSslow));
    delay(5);
    Serial.println(rampValue);
    analogWrite(red1,rampValue * g_redPercent);
    analogWrite(green1,rampValue * g_greenPercent);
    analogWrite(blue1,rampValue * g_bluePercent);
  }
  //beatTimer();
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMSslow))
  {
    rampValue = rampValue - (1500 / (g_bpmMSslow));
    delay(5);
    Serial.println(rampValue);
    analogWrite(red1,rampValue * g_redPercent);
    analogWrite(green1,rampValue * g_greenPercent);
    analogWrite(blue1,rampValue * g_bluePercent);
  }
}
//*********************************
void lightPattern4()
{
  // Slow light blend between colors
  // Constant slow BPM 70 bpm?
  // colors: purple, blue, pink, 
  g_bpmMSslow = 1300;
  changeColor();
  unsigned long rampValue = 0;
  delay(200);
  int v1 = rand();
  int v2 = rand();
  int v3 = rand();
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMSslow))
  {
    rampValue = rampValue + (1500 / (g_bpmMSslow));
    delay(5);
    Serial.println(rampValue);
    sprintf(tempString, "%4d", rampValue);
    s7sSendStringSPI(tempString);
    analogWrite(red1,rampValue * v1);
    analogWrite(green1,rampValue * v2);
    analogWrite(blue1,rampValue * v3);
  }
  //beatTimer();
  timeMS = millis();
  while ((millis() - timeMS) < (g_bpmMSslow))
  {
    rampValue = rampValue - (1500 / (g_bpmMSslow));
    delay(5);
    Serial.println(rampValue);
    sprintf(tempString, "%4d", rampValue);
    s7sSendStringSPI(tempString);
    analogWrite(red1,rampValue * v1);
    analogWrite(green1,rampValue * v2);
    analogWrite(blue1,rampValue * v3);
  }
}
//*********************************
void lightPattern5()
{
  
}

//*********************************
void button1push()
{
lightPattern = lightPattern + 1;
if (lightPattern = 5)
{ 
  lightPattern = 1; 
}
//Serial.println("lightPattern = " + lightPattern);
}

//*********************************
void button2push()
{
 return;
 //goes back to voidloop()
 //used to reset light pattern to beginning of pattern
 //used to being light pattern back in sync with music
}

//*********************************
int rotaryPotBpm(int inputVal)
{
  //Serial.println(inputVal);
  if(inputVal < 51)
  { g_bpm = 115; }
  else if(inputVal < 102)
  { g_bpm = 116; }
  else if(inputVal < 153)
  { g_bpm = 117; }
  else if(inputVal < 205)
  { g_bpm = 118; }
  else if(inputVal < 256)
  { g_bpm = 119; }
  else if(inputVal < 307)
  { g_bpm = 120; }
  else if(inputVal < 358)
  { g_bpm = 121; }
  else if(inputVal < 409)
  { g_bpm = 122; }
  else if(inputVal < 460)
  { g_bpm = 123; }
  else if(inputVal < 512)
  { g_bpm = 124; }
  else if(inputVal < 563)
  { g_bpm = 125; }
  else if(inputVal < 614)
  { g_bpm = 126; }
  else if(inputVal < 665)
  { g_bpm = 127; }
  else if(inputVal < 716)
  { g_bpm = 128; }
  else if(inputVal < 767)
  { g_bpm = 129; }
  else if(inputVal < 818)
  { g_bpm = 130; }
  else if(inputVal < 870)
  { g_bpm = 131; }
  else if(inputVal < 921)
  { g_bpm = 132; }
  else if(inputVal < 972)
  { g_bpm = 133; }
  else if(inputVal < 1023)
  { g_bpm = 134; }
  else if(inputVal < 1023)
  { g_bpm = 134; }
  //Serial.println(g_bpm);
  return g_bpm;
}

//*********************************
void beatTimer()
{
  digitalWrite(13, digitalRead(13) ^ 1);
  g_bpm = g_bpm + 0;
  //Serial.println(g_bpm);
}
//*********************************
void changeColor()
{
g_lightColor = g_lightColor + 1;
if(g_lightColor == 6)
  {
    g_lightColor = 0;
  }
  //
  //
if(g_lightColor == 0)
  {
    //red
    g_redPercent = 1;
    g_greenPercent = 0;
    g_bluePercent = 0;
  }
else if(g_lightColor == 1)
  {
    //purple
    g_redPercent = 1;
    g_greenPercent = 0;
    g_bluePercent = .6 ;
  }
else if(g_lightColor == 2)
  {
    //blue
    g_redPercent = 0;
    g_greenPercent = 0;
    g_bluePercent = .5;
  }
else if(g_lightColor == 3)
  {
    //blue
    g_redPercent = 0;
    g_greenPercent = .5;
    g_bluePercent = .5;
  }
else if(g_lightColor == 4)
  {
    //blue
    g_redPercent = .5;
    g_greenPercent = 1;
    g_bluePercent = 0;
  }
  else if(g_lightColor == 5)
  {
    //blue
    g_redPercent = .5;
    g_greenPercent = .7;
    g_bluePercent = .5;
  }
}
// This custom function works somewhat like a serial.print.
//  You can send it an array of chars (string) and it'll print
//  the first 4 characters in the array.
void s7sSendStringSPI(String toSend)
{
  digitalWrite(ssPin, LOW);
  for (int i=0; i<4; i++)
  {
    SPI.transfer(toSend[i]);
  }
  digitalWrite(ssPin, HIGH);
}

// Send the clear display command (0x76)
//  This will clear the display and reset the cursor
void clearDisplaySPI()
{
  digitalWrite(ssPin, LOW);
  SPI.transfer(0x76);  // Clear display command
  digitalWrite(ssPin, HIGH);
}

// Set the displays brightness. Should receive byte with the value
//  to set the brightness to
//  dimmest------------->brightest
//     0--------127--------255
void setBrightnessSPI(byte value)
{
  digitalWrite(ssPin, LOW);
  SPI.transfer(0x7A);  // Set brightness command byte
  SPI.transfer(value);  // brightness data byte
  digitalWrite(ssPin, HIGH);
}

// Turn on any, none, or all of the decimals.
//  The six lowest bits in the decimals parameter sets a decimal 
//  (or colon, or apostrophe) on or off. A 1 indicates on, 0 off.
//  [MSB] (X)(X)(Apos)(Colon)(Digit 4)(Digit 3)(Digit2)(Digit1)
void setDecimalsSPI(byte decimals)
{
  digitalWrite(ssPin, LOW);
  SPI.transfer(0x77);
  SPI.transfer(decimals);
  digitalWrite(ssPin, HIGH);
}
